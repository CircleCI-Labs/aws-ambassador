version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecr: circleci/aws-ecr@9.0.4
  aws-ecs: circleci/aws-ecs@4.0.0
  snyk: snyk/snyk@2.1.0
  ggshield: gitguardian/ggshield@1.1.4

commands:
  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - run:
          name: Pip Install Testing Requirements
          command: pip install -r << parameters.requirements-path >>
      - run:
          name: Make Directory for Test Results
          command: mkdir test-results
      - run:
          name: Run PyTest Test Suite
          command: pytest << parameters.pytest-args >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_IMAGE}-$(docker version -f {{.Server.Arch}})-${CIRCLE_SHA1}.tar ${DOCKER_IMAGE}:${CIRCLE_SHA1}
      - run: ls -lah /tmp/docker-images/
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*
      - run: rm -rf /tmp/docker-images/

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - run: ls -lah /tmp/
      - attach_workspace:
          at: /tmp
      - run: ls -lah /tmp/docker-images/
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_IMAGE}-$(docker version -f {{.Server.Arch}})-${CIRCLE_SHA1}.tar

  testing-docker-image:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            export GOSS_OPTS="--format junit"
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Make Directory for Goss Results
          command: mkdir goss-results
      - run:
          name: Run dgoss Test
          command: |
            export GOSS_OPTS="--format junit"
            dgoss run -p 8080:8080 ${DOCKER_IMAGE}:${CIRCLE_SHA1}  > ./goss-results/report.xml
      - store_test_results:
          path: goss-results
      - store_artifacts:
          path: goss-results

  build:
    description: "Build Docker image via Build Tools"
    steps:
      - checkout
      - run:
          name: Set Version
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV 
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile -t ${DOCKER_IMAGE}:${CIRCLE_SHA1} --build-arg VERSION=${VERSION} --build-arg CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL} --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg CIRCLE_USERNAME=${CIRCLE_USERNAME} --build-arg CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} .

  enable-docker-experimental:
    description: "Enables Experimental Features in Docker"
    steps:
      - run:
          name: "Enable Experimental Feature in Docker"
          command: |
            mkdir -p $HOME/.docker
            echo $'{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json
            echo $'{\n    "experimental": "enabled"\n}' | sudo tee $HOME/.docker/config.json
            sudo service docker restart

executors:
  browsers-python:
    docker:
      - image: cimg/python:3.9-browsers
  
  arm64:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: arm.medium

  amd64:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: medium

jobs:
  test-demo:
    executor: browsers-python
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose --junitxml=test-results/junit.xml"
      
  build-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - checkout
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo

  test-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - checkout
      - load-docker-image
      - testing-docker-image
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      GOSS_SLEEP: 10

  scan-image:
    parameters:
      architecture:
        type: executor
      os-type:
        type: string
    executor: << parameters.architecture >>
    steps:
      - load-docker-image
      - snyk/scan:
          docker-image-name: ${DOCKER_IMAGE}:${CIRCLE_SHA1}
          severity-threshold: critical
          os: << parameters.os-type >>
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo

  publish-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - checkout
      - load-docker-image
      - aws-cli/setup:
          profile_name: default
          role_arn: arn:aws:iam::992382483259:role/ambassador
          role_session_name: example-session
      - aws-ecr/ecr_login:
          public_registry: true
      - run:
          name: "Tag Image to be pushed to ECR"
          command: |
            docker tag ${DOCKER_IMAGE}:${CIRCLE_SHA1} public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-$(docker version -f {{.Server.Arch}})
            docker tag ${DOCKER_IMAGE}:${CIRCLE_SHA1} public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-$(docker version -f {{.Server.Arch}})
            docker images
      - aws-ecr/push_image:
          repo: ${ECR_REPO}
          public_registry: true
          tag: latest-$(docker version -f {{.Server.Arch}}),${CIRCLE_SHA1}-$(docker version -f {{.Server.Arch}})
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      ECR_REPO: ambassador

  publish-manifest:
    executor: amd64
    steps:
      - enable-docker-experimental
      - aws-cli/setup:
          profile_name: default
          role_arn: arn:aws:iam::992382483259:role/ambassador
          role_session_name: example-session
      - aws-ecr/ecr_login:
          public_registry: true
      - run:
          name: "Pull down arm64 & amd64 images"
          command: |
            docker pull public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-arm64
            docker pull public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-arm64
            docker pull public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-amd64
            docker pull public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-arm64
      - run:
          name: "Create and Publish Manifest for CircleCI SHA"
          command: |
            docker manifest create public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1} public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-arm64 public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-amd64
            docker manifest annotate public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1} public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-arm64 --arch arm64
            docker manifest annotate public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1} public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}-amd64 --arch amd64
            docker manifest push public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:${CIRCLE_SHA1}
      - run:
          name: "Create and Publish Manifest for latest"
          command: |
            docker manifest create public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-arm64 public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-amd64
            docker manifest annotate public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-arm64 --arch arm64
            docker manifest annotate public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest-amd64 --arch amd64
            docker manifest push public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/${ECR_REPO}:latest
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      ECR_REPO: ambassador


workflows:
  demo:
    jobs:
      - ggshield/scan:
          name: Scanning for Secrets with GitGuardian
          revision: $CIRCLE_SHA1
          context: ambassador
      - test-demo:
          name: "Testing Python Code"
      - build-image:
          name: "Building << matrix.architecture >> Container Image"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
      - test-image:
          name: "Testing << matrix.architecture >> Container Image"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
          requires:
            - "Building << matrix.architecture >> Container Image"
      - scan-image:
          name: "Scan << matrix.architecture >> Container Image"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
              os-type: ["linux-arm64", "linux"]
            exclude:
              - architecture: "arm64"
                os-type: "linux"
              - architecture: "amd64"
                os-type: "linux-arm64"
          context: ambassador
          requires:
            - "Building << matrix.architecture >> Container Image"
      - publish-image:
          name: "Publish << matrix.architecture >> Container Image to ECR"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
          requires:
            - "Testing << matrix.architecture >> Container Image"
            - "Testing Python Code"
            - "Scan << matrix.architecture >> Container Image"
      - publish-manifest:
          name: "Publish Manifest to ECR"
          requires:
            - "Publish arm64 Container Image to ECR"
            - "Publish amd64 Container Image to ECR"
      - aws-ecs/deploy_service_update:
          auth:
            - aws-cli/setup:
                profile_name: default
                role_arn: arn:aws:iam::992382483259:role/ambassador
                role_session_name: example-session
          cluster: ambassador
          container_image_name_updates: container=ambassador-amd,image-and-tag=public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/ambassador:${CIRCLE_SHA1}
          family: ambassador-amd
          service_name: ambassador-amd
          profile_name: default
          requires:
            - "Publish Manifest to ECR"
      - aws-ecs/deploy_service_update:
          auth:
            - aws-cli/setup:
                profile_name: default
                role_arn: arn:aws:iam::992382483259:role/ambassador
                role_session_name: example-session
          cluster: ambassador
          container_image_name_updates: container=ambassador-arm,image-and-tag=public.ecr.aws/${AWS_ECR_PUBLIC_REGISTRY_ALIAS}/ambassador:${CIRCLE_SHA1}
          family: ambassador-arm
          service_name: ambassador-arm
          profile_name: default
          requires:
            - "Publish Manifest to ECR"